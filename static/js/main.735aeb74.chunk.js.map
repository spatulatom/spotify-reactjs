{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/Navigation/NavigationItem/NavigationItem.js","Components/Navigation/Topbar/Topbar.js","Components/ModifyYourList/Playlists.js","Components/ModifyYourList/ModifyYourList.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["token","SearchBar","props","state","term","handleTermChange","bind","search","event","this","setState","target","value","onSearch","className","onChange","placeholder","onClick","class","React","Component","Track","addTrack","removeTrack","onAdd","track","onRemove","isRemoval","console","log","name","artists","renderAction","TrackList","tracks","map","key","id","SearchResults","searchResults","Playlist","handlePlaylistName","savePlaylist","onNameChange","onSave","playlistTracks","NavigationItem","useState","active","setActive","prev","href","auth","logOut","logIn","Topbar","onAuth","users","usersName","Spotify","getAccess","tokenMatch","localStorage","getItem","expiresMatch","Date","alert","spotifyLogoutWindow","window","open","setTimeout","close","location","clear","url","encodeURIComponent","match","expires","getTime","setItem","checkYourLists","userId","headers","Authorization","fetch","then","response","json","jsonResponse","items","list","getUsersName","display_name","accessToken","uri","savePlayList","trackUris","length","method","body","JSON","stringify","playlistId","uris","addItemsToPlayList","listName","find","listId","getPlaylist","item","song","Playlists","clearTracks","addName","reply","onAddName","ModifyYourList","onAddItems","onCheckYourLists","onYourSpotifyLists","App","playlistName","yourSpotifyLists","getSearchResultsFromLocalStorage","setSearchResultsInLocalStorage","setUsersNameInLocalStorage","getUserFromLocalStorage","updatePlaylistName","addItemsToPlaylist","setAuthInLocalStorage","getAuthromLocalStorage","scrollToTop","todoLocal","parse","user","prevState","catch","reject","savedTrack","push","playlistTrack","filter","currentTrack","scrollTo","top","left","behavior","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.735aeb74.chunk.js","sourcesContent":["\r\n\r\n// i think its elkom93@gmail.com\r\nconst clientId = 'e70b47b73b0d4e98ad0ea7ec50f8d2b8';\r\nconst redirectUri = 'https://spatulatom.github.io/spotify/';\r\n\r\nlet token;\r\n\r\n\r\n \r\n\r\n const Spotify ={\r\n    \r\n    \r\n    getAccess(){\r\n\r\n        if(token){\r\n            return token}\r\n            \r\n        const tokenMatch = localStorage.getItem(\"token\");\r\n        // whats happening here, new Date gets string as argument?\r\n        // ok: when we call new Date() like this it will return object of curren date, \r\n        // to see it we need toString() it; when we provide arg like string describing data\r\n        // new Date(\"curren data but it need to have certain format\"), we will get an\r\n        // object with the date\r\n        const expiresMatch = new Date(localStorage.getItem(\"expirationDate\"));\r\n\r\n        if(tokenMatch&&(expiresMatch<= new Date() )) {\r\n            alert(\"Your session has expired\");\r\n            const url2 = 'https://www.spotify.com/logout/';                                                                                                                                                                                                                                                                            // \r\n      const spotifyLogoutWindow = window.open(url2, 'Spotify Logout', 'width=700,height=500,top=40,left=40')                                                                                                \r\n      setTimeout(() => spotifyLogoutWindow.close(), 1000);\r\n    //   these two line below wont really be needed when code deployed , for now they preventig function from going\r\n    // into map() and producing errors, yet the spotify close up window nver closes as tose url commands migh conflict, \r\n    // but it logs out from Spotify and new token is needed so its fine,\r\n      const url = 'http://localhost:3000/' ;\r\n            window.location = url; \r\n      localStorage.clear();\r\n      token='';\r\n      return token;\r\n\r\n        }  else if(tokenMatch&&(expiresMatch> new Date() )) {\r\n                token=tokenMatch;\r\n                return token;\r\n        }     \r\n        \r\n        else{\r\n        let url = 'https://accounts.spotify.com/authorize';\r\n        url += '?client_id=' + encodeURIComponent(clientId);\r\n        url += '&response_type=token&scope=playlist-modify-public';\r\n    \r\n        url += '&redirect_uri=' + encodeURIComponent(redirectUri);\r\n        \r\n        \r\n        window.location = url;\r\n        \r\n        const tokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n        token =tokenMatch[1];\r\n        let expires = new Date(new Date().getTime() + expiresMatch[1] * 1000);\r\n        \r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('expirationDate', expires);\r\n        \r\n\r\nreturn token;\r\n        }},\r\n\r\n\r\n       \r\n\r\ncheckYourLists(){\r\n\r\n    \r\n    const token= Spotify.getAccess();\r\n    \r\n    const headers = { \r\n        Authorization: `Bearer ${token}`\r\n    };\r\n    let userId;\r\n    return fetch('https://api.spotify.com/v1/me',\r\n    {headers: headers}\r\n    ).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n                       userId = jsonResponse.id;\r\n                        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,{\r\n          headers: headers,\r\n          \r\n          \r\n    }).then(response => response.json()\r\n    )\r\n    .then(jsonResponse => {\r\n        console.log(\"ourplaylists\",jsonResponse);\r\n    //     \r\n    \r\n    return jsonResponse.items\r\n\r\n\r\n    }\r\n    ).then(response=> { \r\n      return  response.map(list=>({name: list.name,\r\n            id: list.id}))\r\n        \r\n} )})\r\n\r\n\r\n\r\n},\r\n \r\n\r\ngetUsersName(){\r\n    return fetch('https://api.spotify.com/v1/me',{headers:{ \r\n            Authorization: `Bearer ${Spotify.getAccess()}`\r\n        }}).then(response=>{\r\n        return  response.json();\r\n    }).then(jsonResponse=>{\r\n        console.log('getUserName', typeof jsonResponse.display_name, jsonResponse.display_name);\r\n        return  {name:jsonResponse.display_name}\r\n    })\r\n},\r\n\r\n\r\n// Log out\r\n     logOut(){\r\n         if(token){\r\n           return  token=\"\";\r\n         }\r\n\r\n     },\r\n\r\n\r\n\r\n\r\n// -----\r\n\r\nsearch(term){\r\n    console.log('search');\r\n    \r\n    const accessToken = Spotify.getAccess();\r\n    return fetch(`https://api.spotify.com/v1/search?q=${term}&type=track,artist,album`,{\r\n        headers:{ \r\n            Authorization: `Bearer ${accessToken}`\r\n        \r\n\r\n    }}).then ((response) => {\r\n        console.log('search2');\r\n        return response.json()\r\n        \r\n    }).then(jsonResponse => {\r\n        console.log('search3');\r\n        if(!jsonResponse.tracks){\r\n            return[];\r\n        }\r\n        return jsonResponse.tracks.items.map(track => ({\r\n            \r\n            id: track.id,\r\n            name: track.name,\r\n            artists: track.artists[0].name,\r\n            uri: track.uri\r\n    \r\n         } ));\r\n    })\r\n\r\n},\r\n\r\nsavePlayList(name, trackUris){\r\n    if(!name || !trackUris.length){\r\n        return;\r\n    }\r\n    const accessToken = Spotify.getAccess();\r\n    const headers = { \r\n        Authorization: `Bearer ${accessToken}`\r\n    };\r\n    let userId;\r\n     return fetch('https://api.spotify.com/v1/me',\r\n    {headers: headers}\r\n    ).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n        console.log('jsonRespone', jsonResponse)\r\n        userId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,{\r\n          headers: headers,\r\n          method: 'POST',\r\n          body: JSON.stringify({name: name})\r\n    }).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n        const playlistId = jsonResponse.id;\r\n    return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`,\r\n    \r\n    { \r\n        headers: headers,\r\n        method: 'POST',\r\n        body: JSON.stringify({uris: trackUris})\r\n    })\r\n\r\n\r\n    })\r\n} )\r\n\r\n},\r\n\r\naddItemsToPlayList(name,trackUris){\r\n\r\nif(!name || !trackUris.length){\r\nreturn;\r\n}\r\nconst accessToken = Spotify.getAccess();\r\n    const headers = { \r\n        Authorization: `Bearer ${accessToken}`\r\n    };\r\n    let userId;\r\n    return fetch('https://api.spotify.com/v1/me',\r\n    {headers: headers}\r\n    ).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n                       userId = jsonResponse.id;\r\n                       console.log('bla');\r\n\r\n\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`,{\r\n          headers: headers,\r\n          \r\n          \r\n    }).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n        console.log(jsonResponse, 'jsonResponse add items');\r\n        const playlistId = jsonResponse.items;\r\n        const listName = playlistId.find(list=>list.name===name);\r\n        const listId = listName.id;\r\n        console.log('bla bla', userId, listName)\r\n\r\n    return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${listId}/tracks`,\r\n    { \r\n        headers: headers,\r\n        method: 'POST',\r\n        body: JSON.stringify({uris: trackUris}),\r\n\r\n    })\r\n\r\n\r\n    })\r\n} )\r\n\r\n},\r\n\r\n\r\n\r\n\r\n// this method is imported straigt into Playlists.js \r\ngetPlaylist(id){\r\nconst accessToken = Spotify.getAccess();\r\n    const headers = { \r\n        Authorization: `Bearer ${accessToken}`\r\n    };\r\n    let userId;\r\n    return fetch('https://api.spotify.com/v1/me',\r\n    {headers: headers}\r\n    ).then(response => response.json()\r\n    ).then(jsonResponse => {\r\n                       userId = jsonResponse.id;\r\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${id}`,{\r\n          headers: headers,\r\n          \r\n          \r\n    }).then(response => response.json()\r\n    )\r\n    .then(jsonResponse=>{\r\n        const listOfSongs =jsonResponse.tracks.items\r\n        const titelsSongs= listOfSongs.map( item=>\r\n       ( {\r\n         song: item.track.name,\r\n        }));\r\n        return titelsSongs;\r\n\r\n  })            \r\n\r\n    \r\n} )\r\n\r\n\r\n},\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default Spotify;","import React from 'react';\r\n\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\nthis.state={\r\n    term: ''\r\n};\r\n\r\nthis.handleTermChange=this.handleTermChange.bind(this);\r\nthis.search= this.search.bind(this);\r\n       \r\n    }\r\n\r\n   \r\n\r\nhandleTermChange(event){\r\n this.setState({term: event.target.value});\r\n\r\n\r\n\r\n}\r\nsearch(){\r\n    this.props.onSearch(this.state.term);\r\n    this.setState({term:''})\r\n}\r\n \r\n \r\n    render(){\r\n        return (\r\n        <div className=\"SearchBar\">\r\n       \r\n           \r\n             <input onChange={this.handleTermChange} placeholder=\"track/arist/album\" value={this.state.term}/>\r\n             <button className=\"SearchButton\" onClick={this.search}>\r\n                 <span class=\"fas fa-search fa-2x\"/>\r\n              </button>\r\n        </div>)\r\n    }\r\n}\r\n\r\n\r\nexport default SearchBar;\r\n","import React from 'react';\r\n\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component{\r\n    constructor(props){\r\n         super(props);\r\n         this.addTrack =this.addTrack.bind(this);\r\n         this.removeTrack = this.removeTrack.bind(this); \r\n\r\n\r\n    }\r\n    addTrack(){\r\n        this.props.onAdd(this.props.track);\r\n\r\n    }\r\n    removeTrack(){\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n\r\n    renderAction(){\r\n        if(this.props.isRemoval){\r\n            console.log('checkin state',this.props.track)\r\n            return (<div className=\"Track\" >\r\n            <div className=\"Track-information\">\r\n            \r\n              <h4> {this.props.track.name}</h4>\r\n              <p> {this.props.track.artists}</p>\r\n            </div><button className=\"Track-action\" onClick={this.removeTrack} ><span class=\"fa fa-trash-alt\"/></button></div>)\r\n            }else{\r\n                return (<div className=\"Track\" onClick={this.addTrack}>\r\n                <div className=\"Track-information\">\r\n                  <h4> {this.props.track.name}</h4>\r\n                  <p> {this.props.track.artists}</p>\r\n                </div><button className=\"Track-action\"><span class=\"fa fa-plus-square\"/></button></div>)\r\n            }\r\n        }\r\n        \r\n    render(){\r\n        return this.renderAction();         \r\n        \r\n}\r\n}\r\n\r\n\r\nexport default Track;    ","import React from 'react';\r\n\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component{\r\n     render(){\r\n      return (\r\n            <div className=\"TrackList\">\r\n               \r\n                   {\r\n                    this.props.tracks.map(track => {\r\n                        return<Track track={track}\r\n                        key={track.id} onAdd={this.props.onAdd}\r\n                        onRemove={this.props.onRemove}\r\n                        isRemoval={this.props.isRemoval}\r\n                        />\r\n                    })\r\n                    }\r\n                \r\n                \r\n            \r\n        </div>);\r\n    \r\n}\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\n\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component{\r\n    render(){\r\n        return (\r\n            <div className=\"SearchResults\">\r\n               <h2>Search Results:</h2>\r\n               <TrackList tracks={this.props.searchResults}\r\n               onAdd ={this.props.onAdd}\r\n               isRemoval = {false}/> \r\n            </div>)\r\n    }\r\n}\r\n\r\n\r\nexport default SearchResults;","import React from 'react';\r\n\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component{\r\n  constructor(props){\r\n  super(props);\r\n  this.state={\r\n    term: ''\r\n};\r\nthis.handlePlaylistName=this.handlePlaylistName.bind(this);\r\n  this.savePlaylist = this.savePlaylist.bind(this);}\r\n  \r\n  \r\n  \r\n  // ist =  this.props.onyourSpotifyLists.map(list=>\r\n//     <li>{list}</li>\r\n//   )\r\n//   }\r\n\r\n\r\nhandlePlaylistName(event){\r\n  this.setState({term: event.target.value});\r\n  this.props.onNameChange(event.target.value);\r\n}\r\n\r\n\r\nsavePlaylist(){\r\n    this.props.onSave();\r\n    this.setState({term:''})\r\n}\r\n\r\n    \r\n    render(){\r\n      // console.log('checkin props', this.props.playlistName)\r\n        return (\r\n            <div className=\"Playlist\">\r\n              {/* defaultvalue insted of value below was preventing list name \r\n              from refreshing after button was clicked, so weird */}\r\n            {/* <input value={this.props.playlistName} onChange={this.handleNameChange}/> */}\r\n            <input onChange={this.handlePlaylistName} placeholder=\"name your list\" value= {this.state.term}  />\r\n       \r\n            <TrackList tracks={this.props.playlistTracks}\r\n            onRemove= {this.props.onRemove}\r\n            isRemoval={true}/> \r\n           \r\n            <button className=\"Playlist-save\" onClick={this.savePlaylist}>Save your playlist</button>\r\n           \r\n            \r\n          </div>);\r\n    \r\n}\r\n}\r\n\r\nexport default Playlist;","import React, {useState} from 'react';\r\n// import { NavLink } from 'react-router-dom';\r\n\r\nimport './NavigationItem.css';\r\n\r\n// \r\n// const NavigationItem = ( props ) => (\r\n//   <ul className=\"NavigationItem\">\r\n//  {!props.auth? <li class=\"button\" onClick={props.logIn} >  Log in  </li> :\r\n//    <li class=\"button\" onClick={props.logOut} > Log out </li> }\r\n//   <li class=\"welcome-section\"> Welcome {props.users}</li>\r\n//   <li><a href=\"#section2\">section1</a></li>\r\n//   <li><a href=\"#section2\">section2</a></li>\r\n//   <li><a href=\"#section3\">section3</a></li>\r\n//   </ul>\r\n// );\r\n\r\nconst NavigationItem = ( props ) => {\r\n  \r\n  const[active, setActive] = useState(false);\r\n\r\n  const toggleClass= ()=>{\r\n      \r\n      setActive(prev=>!prev)\r\n  }\r\n  \r\n  return(\r\n  <div class={active? \"responsive topnav\": \"topnav\"}  id=\"myTopnav\" onClick={toggleClass}>\r\n\r\n  {/* <a class=\"welcome-section\"> Welcome {props.users}</a> */}\r\n  <a  href=\"#\" class=\"icon\" >\r\n    <i class=\"fa fa-bars\"></i>\r\n\r\n\r\n  <a href =\"#\">Home</a>\r\n  <a href=\"#section1\">Create</a>\r\n  <a href=\"#section2\">Add</a>\r\n  <a href=\"#section3\">Comming Soon</a>\r\n  {!props.auth? <a href=\"#\" class=\"button\" onClick={props.logIn} >  Log in  </a> :\r\n   <a href=\"#\" class=\"button\" onClick={props.logOut} > Log out </a> }\r\n   </a>\r\n  \r\n\r\n  </div>\r\n)}\r\nexport default NavigationItem;","import React from 'react';\r\nimport NavigationItem from '../NavigationItem/NavigationItem';\r\n\r\nimport classes from './Topbar.module.css';\r\n// import Track from '../Track/Track';\r\n\r\nclass Topbar extends React.Component{\r\n    // i dont think we need here constructor at all\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n        \r\n\r\n\r\n       render(){\r\n      return (\r\n            <div>\r\n                <header>\r\n                    <nav>\r\n                        <NavigationItem auth={this.props.onAuth} logOut={this.props.logOut} logIn={this.props.logIn} users={this.props.usersName} />\r\n                    </nav>\r\n                </header>\r\n               \r\n                   \r\n                \r\n            \r\n        </div>);\r\n    \r\n}\r\n}\r\n\r\nexport default Topbar;","import React from 'react';\r\nimport Spotify from '../../util/Spotify';\r\nimport './Playlists.css';\r\n\r\n\r\nclass Playlists extends React.Component{\r\n    constructor(props){\r\n    super(props);\r\n    this.state={\r\n      tracks: []\r\n  };\r\n  \r\n    this.getPlaylist=this.getPlaylist.bind(this);\r\n    this.clearTracks=this.clearTracks.bind(this);\r\n    this.addName=this.addName.bind(this);\r\n    }\r\n  \r\n  \r\n \r\n  \r\n  \r\n  \r\n  \r\n    getPlaylist(){\r\n        \r\n        Spotify.getPlaylist(this.props.id).then(reply=>  {\r\n         this.setState({tracks: reply});\r\n            console.log(reply)\r\n        }\r\n        \r\n      \r\n        )\r\n      }\r\n\r\n\r\n    clearTracks(){\r\n        this.setState({tracks: []})\r\n    }\r\n    addName(){\r\n      this.props.onAddName(this.props.name)\r\n    }\r\n      \r\n      render(){\r\n        \r\n          return (<div >\r\n            \r\n            <ul>\r\n              <li><h3 className=\"Playlists-header\">\r\n               {this.props.name}\r\n            </h3> </li>\r\n            </ul>\r\n            <div className=\"Buttons\">\r\n            <button className=\"Playlists-buttons\" onClick={this.getPlaylist}>see <br/>more</button>\r\n            <button className=\"Playlists-buttons\" onClick={this.clearTracks}>see<br/> less</button>\r\n            <a href=\"#section2\" className=\"Playlists-buttons\"  onClick={this.addName}>add tracks</a>\r\n            {/* <a href=\"#section2\">Comming Soon</a> */}\r\n            </div>\r\n            {this.state.tracks.map(track=>{\r\n            return <h5>{track.song}</h5>})}\r\n      </div>)\r\n          \r\n  \r\n\r\n        }}\r\n  \r\n  export default Playlists;","import React from 'react';\r\n\r\nimport './ModifyYourList.css';\r\nimport TrackList from '../TrackList/TrackList';\r\nimport Playlists from './Playlists'\r\n\r\nclass ModifyYourList extends React.Component{\r\n  constructor(props){\r\n  super(props);\r\n  this.state={\r\n    term: ''\r\n};\r\nthis.handlePlaylistName=this.handlePlaylistName.bind(this);\r\n  this.onAddItems=this.onAddItems.bind(this);\r\n  this.addName=this.addName.bind(this);\r\n\r\n  }\r\n\r\n\r\n// componentDidMount(){\r\n// this.props.onCheckYourLists()\r\n  \r\n\r\n\r\nhandlePlaylistName(event){\r\n  this.setState({term: event.target.value});\r\n  this.props.onNameChange(event.target.value);\r\n}\r\n\r\n\r\n\r\nonAddItems(){\r\n  \r\n  this.props.onAddItems();\r\n  this.setState({term:''})\r\n}\r\naddName(name){\r\n  this.setState({term: name});\r\n  // the problem was that when setting state throug this function, the value of input was set just fine\r\n  // but onChange wasnt triggered and handlePlaylistName wasnt setting the playlistName in Appjs - therfore\r\n  // Spotyfi.addItems was getteing wrong name for POST request, yet the line below sorts that issue:\r\nthis.props.onNameChange(name);\r\n}\r\n\r\nrender(){\r\n        \r\n  return (\r\n      <div className=\"Playlists\">\r\n    <div className=\"AddItems-topbar\">    \r\n<input className =\"Playlists-input\" onChange={this.handlePlaylistName} placeholder=\"playlist's name\" value= {this.state.term}  />\r\n<button className=\"Playlists-save\" onClick={this.onAddItems} >Add tracks</button>\r\n<TrackList tracks={this.props.playlistTracks}\r\n onRemove= {this.props.onRemove}\r\n isRemoval={true}/>\r\n</div>\r\n<div className=\"AddItems-playlists\">\r\n {/* <TrackList tracks={this.props.playlistTracks}\r\n onRemove= {this.props.onRemove}\r\n isRemoval={true}/>  */}\r\n {/* <button className=\"Playlists-save\" onClick={this.onAddItems}>Modify your list</button> */}\r\n\r\n  \r\n        {/* <h2>Your current lists:</h2> */}\r\n        <button onClick={this.props.onCheckYourLists} className=\"Playlists-save\">Check your current lists:</button>\r\n   \r\n      <div>{this.props.onYourSpotifyLists.map(item=>{\r\nreturn <Playlists key={item.id} onAddName={this.addName}\r\nname={item.name} id={item.id}/>})}\r\n</div>\r\n</div>\r\n </div>);\r\n\r\n  }\r\n}\r\n\r\nexport default ModifyYourList;","import React from 'react';\r\n\r\nimport './App.css';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\nimport SearchResults from '../SearchResults/SearchResults';\r\n import Playlist from '../Playlist/Playlist';\r\nimport Topbar from '../Navigation/Topbar/Topbar';\r\n\r\nimport Spotify from '../../util/Spotify';\r\nimport ModifyYourList from '../ModifyYourList/ModifyYourList';\r\n\r\nclass App extends React.Component{\r\n  localStorage;\r\n  constructor(props){\r\n    super(props);\r\n    this.state ={\r\n      searchResults:[],\r\n      playlistName: 'New/Existing List',\r\n      playlistTracks: [],\r\n      yourSpotifyLists: [],\r\n      users: \"\",\r\n      auth: false,\r\n      \r\n      \r\n\r\n    };\r\n    this.getSearchResultsFromLocalStorage=this.getSearchResultsFromLocalStorage.bind(this);\r\n    this.setSearchResultsInLocalStorage=this.setSearchResultsInLocalStorage.bind(this);\r\n    this.setUsersNameInLocalStorage=this.setUsersNameInLocalStorage.bind(this);\r\n    this.getUserFromLocalStorage=this.getUserFromLocalStorage.bind(this);\r\n    this.logIn=this.logIn.bind(this);\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.savePlaylist =this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n    this.addItemsToPlaylist= this.addItemsToPlaylist.bind(this);\r\n    this.checkYourLists = this.checkYourLists.bind(this);\r\n    this.logOut=this.logOut.bind(this);\r\n    this.setAuthInLocalStorage=this.setAuthInLocalStorage.bind(this);\r\n    this.getAuthromLocalStorage=this.getAuthromLocalStorage.bind(this);\r\n    this.scrollToTop=this.scrollToTop.bind(this);\r\n    \r\n   \r\n    \r\n  }\r\n// have to ask myself what do i want to out of those sorage saving functions,\r\n// and that is only !one thing to get the auth and users after page refresh!, \r\n// that's it , when loging out everthing gets cleared including local sotrge values since\r\n// Componet Did Mount runs after logOut() function and sets local storage to \r\n// what stare is at that time and that is default empty string\r\n\r\n  componentDidMount(){\r\n  \r\n    // let local = JSON.parse(localStorage.getItem(\"userName\"));\r\n    //       if(local===\"second\"){\r\n    //        this.logIn()\r\n    //      }else{\r\n\r\n          console.log('componentDidMount');\r\n    this.getUserFromLocalStorage();\r\n    this.getAuthromLocalStorage();\r\n    this.getSearchResultsFromLocalStorage();\r\n         \r\n    \r\n        }\r\n\r\n      \r\n      \r\n        getAuthromLocalStorage(){\r\n          if (localStorage.getItem(\"auth\")===null) {\r\n            localStorage.setItem(\"auth\", JSON.stringify(this.state.auth));\r\n          }else{\r\n            let todoLocal = JSON.parse(localStorage.getItem(\"auth\"));\r\n            this.setState({auth:todoLocal});\r\n          }}\r\n      \r\n      \r\n       //  saving usersName to localStorage\r\n        getUserFromLocalStorage(){if (localStorage.getItem(\"usersName\")===null) {\r\n          localStorage.setItem(\"usersName\", JSON.stringify(this.state.users));\r\n          }else{\r\n          let user = JSON.parse(localStorage.getItem(\"usersName\"));\r\n          this.setState({users:user});\r\n           }\r\n        } \r\n\r\n\r\n   componentDidUpdate(prevState){\r\n       console.log('componentDidUpdate')\r\n      this.setSearchResultsInLocalStorage();\r\n      this.setUsersNameInLocalStorage();\r\n      this.setAuthInLocalStorage();\r\n      }\r\n\r\n  //     // ideal spot for fetchin data and steeing state would be in componentDidMout but\r\n  //     // in this case that triggers a redirect and login to spotify so it basicallu looks that you open \r\n  //     // ur up and two mili-seconds later get a log in window to spotify, \r\n  //     // for that reason I will fetch my lists throug button click \r\n  //     // if(prevState.yourSpotifyLists!==this.state.yourSpotifyLists){\r\n  //     // this.checkYourLists();}\r\n    \r\n      \r\n  \r\n    \r\n        setAuthInLocalStorage(){\r\n          localStorage.setItem(\"auth\", JSON.stringify(this.state.auth));\r\n          }; \r\n        setSearchResultsInLocalStorage(){\r\n            localStorage.setItem(\"searchResults\", JSON.stringify(this.state.searchResults));\r\n            };\r\n        setUsersNameInLocalStorage(){\r\n              localStorage.setItem(\"usersName\", JSON.stringify(this.state.users)\r\n              )}\r\n  \r\n  \r\n  \r\n    \r\n  \r\n// saving sarch results in local storage\r\n  \r\n  getSearchResultsFromLocalStorage(){\r\n      if (localStorage.getItem(\"searchResults\")===null) {\r\n        localStorage.setItem(\"searchResults\", JSON.stringify([]));\r\n      }else{\r\n        let todoLocal = JSON.parse(localStorage.getItem(\"searchResults\"));\r\n        this.setState({searchResults:todoLocal});\r\n      }}\r\n  \r\n  //     // ---\r\n\r\n  \r\n  \r\n       \r\n    \r\n  \r\n\r\n  \r\n   logIn(){\r\n      \r\n    Spotify.getUsersName().then(usersName=>{\r\n\r\n    if (usersName.name.length<1){\r\n      \r\n       this.setState({\r\n        // users: usersName.name\r\n        users: usersName.name\r\n        });}\r\n        else{\r\n          this.setState({\r\n            users: \"Have fun!\"\r\n          })\r\n        }\r\n        this.setState({\r\n          auth: true\r\n        })\r\n      }).catch(reject=>{\r\n        this.setState({\r\n          users: \"Incognito\"\r\n        });\r\n        this.setState({\r\n          auth: false\r\n        })\r\n      });\r\n      // .catch(onReject) is syntactic sugar for .then(undefined, onReject)\r\n    \r\n    }\r\n\r\n     \r\n      \r\n\r\n      // clear local storage, clear window.location\r\n\r\n\r\n      \r\n    logOut(){\r\n    \r\n      const url = 'https://www.spotify.com/logout/';                                                                                                                                                                                                                                                                               \r\n      const spotifyLogoutWindow = window.open(url, 'Spotify Logout', 'width=700,height=500,top=40,left=40')                                                                                                \r\n      setTimeout(() => spotifyLogoutWindow.close(), 2000);\r\n      this.setState({\r\n      users:\"\"\r\n    });\r\n    this.setState({\r\n      searchResults: []\r\n    });\r\n    this.setState({\r\n      auth: false\r\n    });\r\n    this.setState({yourSpotifyLists: []});\r\n    localStorage.clear();  \r\n\r\n    // access token was still sometimes satying in the app in those \r\n    // times when logut/login was pressed and app wasnot refreshed, then\r\n    // the username was loading even though localsorag and state were cleared\r\n    // yet accesstoken in Spotify module was equal to acces token so even \r\n    // without having to log into spotify api getUername function was working!\r\n    // and loading userName\r\n    Spotify.logOut(); \r\n\r\n  }\r\n  \r\n     \r\n   \r\naddTrack(track){\r\n    let tracks = this.state.playlistTracks;\r\n    if(tracks.find(savedTrack => savedTrack.id ===track.id)){\r\n      return;\r\n    }\r\n    tracks.push(track);\r\n    this.setState({playlistTrack: tracks});\r\n    \r\n\r\n  }\r\n\r\n  removeTrack(track){\r\n    let tracks = this.state.playlistTracks;\r\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\r\n    this.setState({playlistTracks: tracks});\r\n  }\r\n\r\n  updatePlaylistName(name){\r\n    this.setState({playlistName: name});\r\n  }\r\n\r\n  savePlaylist(){\r\n    \r\n    //alert(\"this method works\")\r\n    const trackUris=this.state.playlistTracks.map(track=>track.uri);\r\n        Spotify.savePlayList(this.state.playlistName, trackUris).then (() => {\r\n      this.setState({\r\n        playlistName: 'New/Existing List', \r\n        playlistTracks: [],\r\n        searchResults: []\r\n      }); \r\n      this.checkYourLists();\r\n    })\r\n  }\r\n\r\naddItemsToPlaylist(){\r\n  const trackUris=this.state.playlistTracks.map(track=>track.uri);\r\n  console.log('trackUris', trackUris);\r\n    Spotify.addItemsToPlayList(this.state.playlistName, trackUris).then (() => {\r\n      this.setState({\r\n        playlistName: 'Name your playlist', \r\n        playlistTracks: []\r\n      });\r\n     \r\n      \r\n    });\r\n    this.setState({\r\n      playlistName: 'Name your playlist', \r\n      playlistTracks: []\r\n    });\r\n}\r\n\r\ncheckYourLists(){\r\n  \r\n  this.logIn();\r\n  Spotify.checkYourLists().then(yourSpotifyLists => {\r\n    this.setState({yourSpotifyLists: yourSpotifyLists});\r\n    this.setState({auth: true})\r\n  })\r\n  \r\n}\r\n\r\n  search(term){ \r\n    // afetr second click serach results dissapear because there is nothing\r\n    // in the input field\r\n    \r\n    // alert(\"this method is linked to the button correctly\")\r\n  Spotify.search(term).then(searchResults => {\r\n    this.setState({searchResults: searchResults});\r\n    this.setState({auth:true})\r\n  });}\r\n\r\nscrollToTop(){\r\n  window.scrollTo({\r\n    top: 0,\r\n    left: 0,\r\n    behavior: 'smooth'\r\n  })\r\n}\r\n  \r\n\r\n  render(){\r\n    return(\r\n    \r\n      <div className=\"Main\">\r\n            {/* {!this.state.auth? <div className=\"No-auth\"></div>: null} */}\r\n        <Topbar onAuth={this.state.auth} logOut={this.logOut} logIn={this.logIn} />\r\n  <h1>Manage<span className=\"highlight\"> Your Spotify{this.state.users===\"Have fun!\"?<span>.</span>:null} </span>{this.state.users}</h1>\r\n  {!this.state.auth? <h4>Due to the Spotify API requirements for its apps in the development modes in order for You to use this app forward your email addresss and Spotify username to tomspatula@gmail.com, thanks </h4>: null}\r\n        <butoon onClick={this.scrollToTop} id=\"btnScrollToTop\">\r\n          <i class=\"material-icons\" >arrow_upward</i></butoon>\r\n      <div className=\"App\">\r\n      <section id=\"section1\" class=\"one\">\r\n                <h2 className=\"header\">Create Your New Playlist</h2>\r\n      <SearchBar onSearch ={this.search}/>\r\n    <div className=\"App-playlist\">\r\n   \r\n      <SearchResults searchResults={this.state.searchResults} \r\n      onAdd = {this.addTrack} />       \r\n       <Playlist playlistName = {this.state.playlistName}  \r\n       playlistTracks={this.state.playlistTracks}\r\n       onRemove={this.removeTrack}\r\n       onNameChange={this.updatePlaylistName}\r\n       onSave= {this.savePlaylist} /> \r\n           </div>\r\n  </section>\r\n  <section id=\"section2\" class=\"two\">\r\n\r\n    <h2 className=\"header\">Add Tracks to Your Playlists</h2>\r\n  <SearchBar onSearch ={this.search}/>\r\n   \r\n  <div className=\"App-playlist\">     \r\n  <SearchResults searchResults={this.state.searchResults} \r\n      onAdd = {this.addTrack} /> \r\n       <ModifyYourList playlistName = {this.state.playlistName}  \r\n       playlistTracks={this.state.playlistTracks}\r\n       onRemove={this.removeTrack}\r\n       onNameChange={this.updatePlaylistName}\r\n      \r\n       onAddItems = {this.addItemsToPlaylist}\r\n       onYourSpotifyLists={this.state.yourSpotifyLists}\r\n       onCheckYourLists = {this.checkYourLists} />\r\n    \r\n        \r\n           </div>\r\n  </section>\r\n  \r\n  \r\n  </div>\r\n  </div>\r\n  \r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './Components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}